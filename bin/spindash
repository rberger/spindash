#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'spindash'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/spindash` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/spindash now"
  exit 64
end

include GLI::App
include Spindash

program_desc 'Setup and Rotate between Desktops on Ubuntu Unity'

version Spindash::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Set output to verbose'
switch [:V,:verbose]

desc 'Do not actually do anything'
switch [:n,:dry_run]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Make sure all the expected apps are running in the expected workspaces'
arg_name 'No Args yet'
command :setup do |c|
  c.desc 'Describe a switch to setup'
  c.switch :s

  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "Setup doesn't do anything yet"
  end
end

desc 'Rotate the Workspaces'
arg_name ''
command :spin do |c|
  c.desc 'Time in seconds between switching workspaces'
  c.default_value 10
  c.flag :time

  c.desc 'Number of columns of workspaces on x axis'
  c.default_value 2
  c.flag :x_spaces

  c.desc 'Number of rows of workspaces on y axis'
  c.default_value 2
  c.flag :y_spaces

  c.desc 'Workspace width in pixels'
  c.default_value 1920
  c.flag :width
  
  c.desc 'Workspace hieght in pixels'
  c.default_value 1080
  c.flag :hieght
  
  c.action do |global_options,options,args|
    spinner = Spin.new(global_options.merge(options))
    spinner.run
    puts "spin command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
